/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Svmi;

// WARNING: This file contains a bunch of hardcoded numbers - these must match
// the corresponding values in runtime/native/include/skip/external.h
// It would be nice to automate this: T21762773

base class ParamType {
  children =
  | ParamTypeVoid()
  | ParamTypeBool()
  | ParamTypeInt64()
  | ParamTypeFloat64()
  | ParamTypeString()

  fun ==(other: ParamType): Bool {
    this.code() == other.code()
  }

  fun code(): Int
  | ParamTypeVoid _ -> 0
  | ParamTypeBool _ -> 1
  | ParamTypeInt64 _ -> 2
  | ParamTypeFloat64 _ -> 3
  | ParamTypeString _ -> 4

  static fun fromCode(i: Int): ParamType {
    i match {
    | 0 -> ParamTypeVoid()
    | 1 -> ParamTypeBool()
    | 2 -> ParamTypeInt64()
    | 3 -> ParamTypeFloat64()
    | 4 -> ParamTypeString()
    | _ -> invariant_violation("invalid code for ParamType")
    }
  }
}

base class ClassIdMagic {
  children =
  | ClassIdUnknown()
  | ClassIdVec()
  | ClassIdDict()
  | ClassIdKeyset()
  | ClassIdTuple()

  fun code(): Int
  | ClassIdUnknown() -> -1
  | ClassIdVec() -> -16
  | ClassIdDict() -> -17
  | ClassIdKeyset() -> -18
  | ClassIdTuple() -> -19

  static fun fromCode(i: Int): ClassIdMagic {
    i match {
    | -1 -> ClassIdUnknown()
    | -16 -> ClassIdVec()
    | -17 -> ClassIdDict()
    | -18 -> ClassIdKeyset()
    | -19 -> ClassIdTuple()
    | _ -> invariant_violation("invalid code for ClassIdMagic")
    }
  }
}

// Describe a specific type
@cpp_export
class Desc private (
  paramType: Int, // : ParamType
  classId: Int, // : ClassIdMagic OR an entry in Table::classes
  targs: Array<Desc>,
)

// Describes a field
@cpp_export
class Field private (
  name: String,
  typ: Desc,
)

base class ClassKind {
  children =
  | KBase()
  | KObjectProxy()
  | KObjectCopy()
  | KShapeProxy()
  | KShapeCopy()

  fun code(): Int
  | KBase() -> 0
  | KObjectProxy() -> 1
  | KObjectCopy() -> 2
  | KShapeProxy() -> 3
  | KShapeCopy() -> 4

  static fun fromCode(i: Int): ClassKind {
    i match {
    | 0 -> KBase()
    | 1 -> KObjectProxy()
    | 2 -> KObjectCopy()
    | 3 -> KShapeProxy()
    | 4 -> KShapeCopy()
    | _ -> invariant_violation("invalid code for ClassKind")
    }
  }
}

// Describes a class
@cpp_export
class Class private (
  name: String,
  kind: Int, // : ClassKind
  fields: Array<Field>,
)
