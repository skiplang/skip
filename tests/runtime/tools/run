#!/usr/bin/env python3





import argparse
import importlib
import logging
import os
import pipes
import subprocess
import sys

import common
import skip_native_compile

logger = logging.getLogger(os.path.basename(__file__))

build_dir = common.build_dir

description = '''
Run a skip program (with a skip.project.json) or ad-hoc script.
'''

def main(stack):
    remainder = common.splitRemainder()
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=description,
        parents=[common.commonArguments(needsBackend=False), skip_native_compile.arguments()])
    parser.add_argument('srcs', metavar='SOURCE', nargs='+')
    parser.add_argument('--backend', default=os.environ.get('BACKEND', 'native'))
    parser.add_argument('--watch', default=False, action='store_true')

    args = common.parse_args(parser)

    if all(common.isSkipFile(path) for path in args.srcs):
        # if all inputs are skip files (ie not project files), add prelude for convenience
        args.srcs += [os.path.join(common.runtime_dir, 'prelude:prelude')]

    if args.backend == 'native':
        common.buildNinjaTarget('skip_to_native')
        sk_standalone_o = os.path.join(build_dir,
           "src/runtime/native/CMakeFiles/sk_standalone.src.dir/src/sk_standalone.cpp.o")
        if(os.path.exists(sk_standalone_o)):
            args.sk_standalone = sk_standalone_o
        binFile = skip_native_compile.compile(stack, args)
        cmd = (binFile.name,)
        if args.watch:
            cmd += ('--watch',)
    else:
        print("Uknown backend %s" % (args.backend))
        exit(2)

    cmd += tuple(remainder)
    logger.debug('Running: ' + ' '.join(map(pipes.quote, cmd)))
    with common.PerfTimer('run.' + args.backend):
        res = subprocess.call(cmd, env=os.environ)
    if res != 0:
        sys.exit(res)


if __name__ == '__main__':
    with common.ExitStack() as stack:
        rc = main(stack)
    sys.exit(rc)
